[{"path":"http://github-pages.ucl.ac.uk/rmcmc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rmcmc authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/articles/barker-proposal.html","id":"example-target-distribution","dir":"Articles","previous_headings":"","what":"Example target distribution","title":"Robust gradient-based MCMC with the Barker proposal","text":"simple example target distribution, consider 3-dimensional Gaussian target heterogeneous scales standard deviation first coordinate 0.01 coordinates 1. rmcmc package expects target distribution specified function evaluating logarithm (potentially unnormalized) probability density point, gradient-based methods Barker proposal, additionally requires specification function evaluating gradient log density function. two functions wrapped list names log_density gradient_log_density respectively.","code":"dimension <- 3 scales <- c(0.01, rep(1, dimension - 1)) target_distribution <- list(   log_density = function(x) -sum((x / scales)^2) / 2,   gradient_log_density = function(x) -x / scales^2 )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/articles/barker-proposal.html","id":"creating-proposal-distribution","dir":"Articles","previous_headings":"","what":"Creating proposal distribution","title":"Robust gradient-based MCMC with the Barker proposal","text":"rmcmc provides implementations several different proposal distributions can used within Metropolis–Hastings based MCMC method: barker_proposal: robust gradient-based Barker proposal proposed Livingstone Zanella (2022). langevin_proposal: gradient-based proposal based discretization Langevin dynamics. random_walk_proposal: Gaussian random-walk proposal. function requires first argument specify target distribution proposal constructed . Optionally additional arguments can used specify scalar scale proposal, vector matrix defining proposal shape routines sample auxiliary variables used proposal. create instance Barker proposal, specifying target distribution arguments left defaults. Rather specifying fixed scale shape tuning parameters, next section illustrate set adaptation parameters warm-stage chains.","code":"proposal <- barker_proposal(target_distribution)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/articles/barker-proposal.html","id":"setting-up-adaptation-of-tuning-parameters","dir":"Articles","previous_headings":"","what":"Setting up adaptation of tuning parameters","title":"Robust gradient-based MCMC with the Barker proposal","text":"rmcmc support adaptively tuning parameters proposal distribution. mediated ‘adapter’ objects define method update parameters proposal based chain state statistics recorded chain iteration. instantiate list adapters () adapt scalar scale proposal distribution coerce average acceptance probability chain transitions target value, (ii) adapt shape proposal distribution per-coordinate scaling factors based estimates coordinate-wise variances target distribution. adapter updates applied initial set ‘warm-’ chain iterations, proposal parameters remaining fixed final adapted values subsequent set main chain iterations.","code":"adapters <- list(   scale_adapter(initial_scale = 1., target_accept_prob = 0.4),   variance_adapter() )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/articles/barker-proposal.html","id":"sampling-a-chain","dir":"Articles","previous_headings":"","what":"Sampling a chain","title":"Robust gradient-based MCMC with the Barker proposal","text":"sample chain first need specify initial chain state. rmcmc package encapsulates chain state list tracks current position chain, also additional quantities auxiliary variables used generate proposed perturbation state, cached values log density gradient computed current position avoid re-computation. chain_state function allows creation list required format, first (required) argument specifying position. generate initial state position coordinates sampled standard normal distribution. now everything needed sample Markov chain. use sample_chain function rmcmc. requires us specify target distribution, proposal distribution, initial chain state, number adaptive warm-iterations non-adaptive main chain iterations list adapters use. sample chain 10^{4} warm-10^{4} main chain iterations. set trace_warm_up TRUE record statistics adaptive warm-chain iterations. progress package installed progress bar show chain progress sampling. return value sample_chains list containing fields accessing final chain state (can used start sampling new chain), variables traced main chain iterations transition statistics recorded.","code":"initial_state <- chain_state(rnorm(dimension)) n_warm_up_iteration <- 10000 n_main_iteration <- 10000 results <- sample_chain(   target_distribution = target_distribution,   proposal = proposal,   initial_state = initial_state,   n_warm_up_iteration = n_warm_up_iteration,   n_main_iteration = n_main_iteration,   adapters = adapters,   trace_warm_up = TRUE ) mean_accept_prob <- mean(results$statistics[, \"accept_prob\"]) adapted_shape <- proposal$parameters()$shape cat(   sprintf(\"Average acceptance probability is %.2f\", mean_accept_prob),   sprintf(\"True target scales: %s\", toString(scales)),   sprintf(\"Adapter scale est.: %s\", toString(adapted_shape)),   sep = \"\\n\" ) #> Average acceptance probability is 0.40 #> True target scales: 0.01, 1, 1 #> Adapter scale est.: 0.00897727437719285, 0.969944570138433, 0.977759033606351"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/articles/barker-proposal.html","id":"visualizing-adaptation","dir":"Articles","previous_headings":"","what":"Visualizing adaptation","title":"Robust gradient-based MCMC with the Barker proposal","text":"can plot proposal shape scale parameters varied adaptive warm-iterations, accessing statistics recorded warm_up_statistics field results object. First considering scalar scale parameter σt\\sigma_t, controlled achieve target average acceptance rate, see adaptation successfully coerces average acceptance rate close 0.4 target value scale parameter adaptation largely stabilized within first 1000 iterations.  Now consider adaptation diagonal shape matrix Σt\\Sigma_t, based estimates per-coordinate variances, see adaptation converges towards known heterogeneous scales along different coordinates.","code":"par(mfrow = c(1, 2)) plot(   exp(results$warm_up_statistics[, \"log_scale\"]),   type = \"l\",   xlab = expression(paste(\"Chain iteration \", t)),   ylab = expression(paste(\"Scale \", sigma[t])) ) plot(   cumsum(results$warm_up_statistics[, \"accept_prob\"]) / 1:n_warm_up_iteration,   type = \"l\",   xlab = expression(paste(\"Chain iteration \", t)),   ylab = expression(paste(\"Average acceptance rate \", alpha[t])),   ylim = c(0, 1) ) matplot(   sqrt(results$warm_up_statistics[, paste0(\"variance_estimate\", 1:dimension)]),   type = \"l\",   xlab = expression(paste(\"Chain iteration \", t)),   ylab = expression(paste(\"Shape \", diag(Sigma[t]^(1 / 2)))),   log = \"y\" ) legend(   \"right\",   paste0(\"coordinate \", 1:dimension),   lty = 1:dimension,   col = 1:dimension,   bty = \"n\" )"},{"path":[]},{"path":"http://github-pages.ucl.ac.uk/rmcmc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew M. Graham. Author, maintainer. Samuel Livingstone. Author. University College London. Copyright holder. Engineering Physical Sciences Research Council. Funder.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Graham MM, Livingstone S (2024). rmcmc: Robust Markov Chain Monte Carlo Methods. R package version 0.0.0.9000, http://github-pages.ucl.ac.uk/rmcmc/, https://github.com/UCL/rmcmc.","code":"@Manual{,   title = {rmcmc: Robust Markov Chain Monte Carlo Methods},   author = {Matthew M. Graham and Samuel Livingstone},   year = {2024},   note = {R package version 0.0.0.9000, http://github-pages.ucl.ac.uk/rmcmc/},   url = {https://github.com/UCL/rmcmc}, }"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/index.html","id":"rmcmc-robust-markov-chain-monte-carlo-methods","dir":"","previous_headings":"","what":"Robust Markov Chain Monte Carlo Methods","title":"Robust Markov Chain Monte Carlo Methods","text":"rmcmc R package simulating Markov chains using Barker proposal compute Markov chain Monte Carlo (MCMC) estimates expectations respect target distribution real-valued vector space. Barker proposal, described Livingstone Zanella (2022) https://doi.org/10.1111/rssb.12482, gradient-based MCMC algorithm inspired Barker accept-reject rule. combines robustness simpler MCMC schemes random-walk Metropolis efficiency gradient-based algorithms Metropolis adjusted Langevin algorithm.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Robust Markov Chain Monte Carlo Methods","text":"can install development version rmcmc like :","code":"# install.packages(\"devtools\") devtools::install_github(\"UCL/rmcmc\")"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Robust Markov Chain Monte Carlo Methods","text":"basic example shows generate samples normal target distribution random scales. Adapters used tune proposal scale achieve target average acceptance probability; tune proposal shape per-dimension scale factors based online estimates target distribution variances.","code":"library(rmcmc)  set.seed(876287L) dimension <- 3 scales <- exp(rnorm(dimension)) target_distribution <- list(   log_density = function(x) -sum((x / scales)^2) / 2,   gradient_log_density = function(x) -x / scales^2 ) proposal <- barker_proposal(target_distribution) results <- sample_chain(   target_distribution = target_distribution,   proposal = proposal,   initial_state = rnorm(dimension),   n_warm_up_iteration = 1000,   n_main_iteration = 1000,   adapters = list(scale_adapter(), variance_adapter()) ) mean_accept_prob <- mean(results$statistics[, \"accept_prob\"]) adapted_shape <- proposal$parameters()$shape cat(   sprintf(\"Average acceptance probability is %.2f\", mean_accept_prob),   sprintf(\"True target scales: %s\", toString(scales)),   sprintf(\"Adapter scale est.: %s\", toString(adapted_shape)),   sep = \"\\n\" ) #> Average acceptance probability is 0.40 #> True target scales: 1.50538046096953, 1.37774732725824, 0.277038897322645 #> Adapter scale est.: 1.35010920408606, 1.5140138215658, 0.248974800274054"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/barker_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Barker proposal object. — barker_proposal","title":"Create a new Barker proposal object. — barker_proposal","text":"Returns list function sample proposal, evaluate log density ratio state pair proposal update proposal parameters. proposal two parameters scale shape. least one scale shape must set sampling proposal evaluating log density ratio.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/barker_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Barker proposal object. — barker_proposal","text":"","code":"barker_proposal(   target_distribution,   scale = NULL,   shape = NULL,   sample_auxiliary = stats::rnorm,   sample_uniform = stats::runif )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/barker_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Barker proposal object. — barker_proposal","text":"target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. scale Scale parameter proposal distribution. non-negative scalar value determining scale steps proposed. shape Shape parameter proposal distribution. Either vector corresponding diagonal shape matrix per-dimension scaling factors, matrix allowing arbitrary linear transformations. sample_auxiliary Function generates random vector auxiliary variable distribution. sample_uniform Function generates random vector standard uniform distribution given integer size.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/barker_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Barker proposal object. — barker_proposal","text":"Proposal object. list entries sample: function generate sample proposal distribution given current chain state, log_density_ratio:  function compute log density ratio proposal given pair current proposed chain states, update: function update parameters proposal, parameters: function return list current parameter values. default_target_accept_prob: function returning default target acceptance rate use scale adaptation. default_initial_scale: function given dimension gives default value use initial proposal scale parameter.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/barker_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Barker proposal object. — barker_proposal","text":"","code":"target_distribution <- list(   log_density = function(x) -sum(x^2) / 2,   gradient_log_density = function(x) -x ) proposal <- barker_proposal(target_distribution, scale = 1.) state <- chain_state(c(0., 0.)) withr::with_seed(876287L, proposed_state <- proposal$sample(state)) log_density_ratio <- proposal$log_density_ratio(state, proposed_state) proposal$update(scale = 0.5)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/chain_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a new chain state. — chain_state","title":"Construct a new chain state. — chain_state","text":"chain state object provides cached access target distribution log density gradient.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/chain_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a new chain state. — chain_state","text":"","code":"chain_state(position, momentum = NULL)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/chain_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a new chain state. — chain_state","text":"position Position component chain state. momentum Momentum component chain state. Optional.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/chain_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a new chain state. — chain_state","text":"New chain state object. list entries position: zero-argument function evaluate position vector. momentum: zero-argument function evaluate momentum vector. dimension: zero-argument function evaluate dimension position momentum vectors. update: function accepting arguments position momentum updating value one state components. copy: function creating copy state object including cached values. log_density: function accepting argument target_distribution evaluating log density target distribution current state, caching value avoid recomputation subsequent calls. gradient_log_density: function accepting argument target_distribution evaluating gradient log density target distribution current state, caching value avoid recomputation subsequent calls.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/chain_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a new chain state. — chain_state","text":"","code":"state <- chain_state(c(0.1, -0.5)) target_distribution <- list(   log_density = function(x) -sum(x^2) / 2,   gradient_log_density = function(x) -x ) state$gradient_log_density(target_distribution) #> [1] -0.1  0.5"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/example_gaussian_stan_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an example BridgeStan StanModel object for a Gaussian model. — example_gaussian_stan_model","title":"Construct an example BridgeStan StanModel object for a Gaussian model. — example_gaussian_stan_model","text":"Requires BridgeStan package installed. Generative model assumed form y ~ normal(mu, sigma) unknown mu sigma.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/example_gaussian_stan_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an example BridgeStan StanModel object for a Gaussian model. — example_gaussian_stan_model","text":"","code":"example_gaussian_stan_model(n_data = 50, seed = 1234L)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/example_gaussian_stan_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an example BridgeStan StanModel object for a Gaussian model. — example_gaussian_stan_model","text":"n_data Number independent data points y generate condition model . seed Integer seed Stan model.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/example_gaussian_stan_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an example BridgeStan StanModel object for a Gaussian model. — example_gaussian_stan_model","text":"BridgeStan StanModel object.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/example_gaussian_stan_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an example BridgeStan StanModel object for a Gaussian model. — example_gaussian_stan_model","text":"","code":"model <- example_gaussian_stan_model(n_data = 5) #> [1] \"BridgeStan not found at location specified by $BRIDGESTAN environment variable, downloading version 2.5.0 to /home/runner/.bridgestan/bridgestan-2.5.0\" #> [1] \"Done!\" model$param_names() #> [1] \"mu\"    \"sigma\""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/involution_langevin.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply involution underlying Langevin proposal to a chain state. — involution_langevin","title":"Apply involution underlying Langevin proposal to a chain state. — involution_langevin","text":"Apply involution underlying Langevin proposal chain state.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/involution_langevin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply involution underlying Langevin proposal to a chain state. — involution_langevin","text":"","code":"involution_langevin(state, scale_and_shape, target_distribution)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/involution_langevin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply involution underlying Langevin proposal to a chain state. — involution_langevin","text":"target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/involution_langevin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply involution underlying Langevin proposal to a chain state. — involution_langevin","text":"Chain state involution applied.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/langevin_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Langevin proposal object. — langevin_proposal","title":"Create a new Langevin proposal object. — langevin_proposal","text":"Returns list function sample proposal, evaluate log density ratio state pair proposal update proposal parameters. proposal two parameters scale shape. least one scale shape must set sampling proposal evaluating log density ratio.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/langevin_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Langevin proposal object. — langevin_proposal","text":"","code":"langevin_proposal(   target_distribution,   scale = NULL,   shape = NULL,   sample_auxiliary = stats::rnorm )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/langevin_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Langevin proposal object. — langevin_proposal","text":"target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. scale Scale parameter proposal distribution. non-negative scalar value determining scale steps proposed. shape Shape parameter proposal distribution. Either vector corresponding diagonal shape matrix per-dimension scaling factors, matrix allowing arbitrary linear transformations. sample_auxiliary Function generates random vector auxiliary variable distribution.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/langevin_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Langevin proposal object. — langevin_proposal","text":"Proposal object. list entries sample: function generate sample proposal distribution given current chain state, log_density_ratio:  function compute log density ratio proposal given pair current proposed chain states, update: function update parameters proposal, parameters: function return list current parameter values. default_target_accept_prob: function returning default target acceptance rate use scale adaptation. default_initial_scale: function given dimension gives default value use initial proposal scale parameter.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/langevin_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new Langevin proposal object. — langevin_proposal","text":"","code":"target_distribution <- list(   log_density = function(x) -sum(x^2) / 2,   gradient_log_density = function(x) -x ) proposal <- langevin_proposal(target_distribution, scale = 1.) state <- chain_state(c(0., 0.)) withr::with_seed(876287L, proposed_state <- proposal$sample(state)) log_density_ratio <- proposal$log_density_ratio(state, proposed_state) proposal$update(scale = 0.5)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_barker.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute logarithm of Barker proposal density ratio. — log_density_ratio_barker","title":"Compute logarithm of Barker proposal density ratio. — log_density_ratio_barker","text":"Compute logarithm Barker proposal density ratio.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_barker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute logarithm of Barker proposal density ratio. — log_density_ratio_barker","text":"","code":"log_density_ratio_barker(   state,   proposed_state,   target_distribution,   scale_and_shape )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_barker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute logarithm of Barker proposal density ratio. — log_density_ratio_barker","text":"state Current chain state. proposed_state Proposed chain state. target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. scale_and_shape Scalar, vector matrix scales shapes proposal distribution. scalar (case value non-negative) auxiliary vector isotropically scaled value. vector (case value equal length dimension space entries non-negative) dimension auxiliary vector scaled separately. matrix (case value square matrix size equal dimension space) pre-multiplying auxiliary vector arbitrary linear transformations can performed.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_barker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute logarithm of Barker proposal density ratio. — log_density_ratio_barker","text":"Logarithm proposal density ratio.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_langevin.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute logarithm of Langevin proposal density ratio. — log_density_ratio_langevin","title":"Compute logarithm of Langevin proposal density ratio. — log_density_ratio_langevin","text":"Compute logarithm Langevin proposal density ratio.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_langevin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute logarithm of Langevin proposal density ratio. — log_density_ratio_langevin","text":"","code":"log_density_ratio_langevin(   state,   proposed_state,   target_distribution,   scale_and_shape )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_langevin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute logarithm of Langevin proposal density ratio. — log_density_ratio_langevin","text":"state Current chain state. proposed_state Proposed chain state. target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. scale_and_shape Scalar, vector matrix scales shapes proposal distribution. scalar (case value non-negative) auxiliary vector isotropically scaled value. vector (case value equal length dimension space entries non-negative) dimension auxiliary vector scaled separately. matrix (case value square matrix size equal dimension space) pre-multiplying auxiliary vector arbitrary linear transformations can performed.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/log_density_ratio_langevin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute logarithm of Langevin proposal density ratio. — log_density_ratio_langevin","text":"Logarithm proposal density ratio.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/random_walk_proposal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new random walk proposal object. — random_walk_proposal","title":"Create a new random walk proposal object. — random_walk_proposal","text":"Returns list function sample proposal, evaluate log density ratio state pair proposal update proposal parameters. proposal two parameters scale shape. least one scale shape must set sampling proposal evaluating log density ratio.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/random_walk_proposal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new random walk proposal object. — random_walk_proposal","text":"","code":"random_walk_proposal(   target_distribution,   scale = NULL,   shape = NULL,   sample_auxiliary = stats::rnorm )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/random_walk_proposal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new random walk proposal object. — random_walk_proposal","text":"target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. scale Scale parameter proposal distribution. non-negative scalar value determining scale steps proposed. shape Shape parameter proposal distribution. Either vector corresponding diagonal shape matrix per-dimension scaling factors, matrix allowing arbitrary linear transformations. sample_auxiliary Function generates random vector auxiliary variable distribution.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/random_walk_proposal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new random walk proposal object. — random_walk_proposal","text":"Proposal object. list entries sample: function generate sample proposal distribution given current chain state, log_density_ratio:  function compute log density ratio proposal given pair current proposed chain states, update: function update parameters proposal, parameters: function return list current parameter values. default_target_accept_prob: function returning default target acceptance rate use scale adaptation. default_initial_scale: function given dimension gives default value use initial proposal scale parameter.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/random_walk_proposal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new random walk proposal object. — random_walk_proposal","text":"","code":"target_distribution <- list(   log_density = function(x) -sum(x^2) / 2 ) proposal <- random_walk_proposal(target_distribution, scale = 1.) state <- chain_state(c(0., 0.)) withr::with_seed(876287L, proposed_state <- proposal$sample(state)) log_density_ratio <- proposal$log_density_ratio(state, proposed_state) proposal$update(scale = 0.5)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/robust_shape_adapter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object to adapt proposal shape (and scale) using robust adaptive Metropolis algorithm of Vihola (2012). — robust_shape_adapter","title":"Create object to adapt proposal shape (and scale) using robust adaptive Metropolis algorithm of Vihola (2012). — robust_shape_adapter","text":"Requires ramcmc package installed.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/robust_shape_adapter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object to adapt proposal shape (and scale) using robust adaptive Metropolis algorithm of Vihola (2012). — robust_shape_adapter","text":"","code":"robust_shape_adapter(   initial_scale = NULL,   target_accept_prob = NULL,   kappa = 0.6 )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/robust_shape_adapter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object to adapt proposal shape (and scale) using robust adaptive Metropolis algorithm of Vihola (2012). — robust_shape_adapter","text":"initial_scale Initial value use scale parameter. set explicitly proposal dimension dependent default used. target_accept_prob Target value average accept probability chain. set proposal dependent default used. kappa Decay rate exponent [0.5, 1] adaptation learning rate.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/robust_shape_adapter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object to adapt proposal shape (and scale) using robust adaptive Metropolis algorithm of Vihola (2012). — robust_shape_adapter","text":"List functions entries initialize, function initializing adapter state proposal parameters beginning chain, update function updating adapter state proposal parameters chain iteration, finalize function performing final updates adapter state proposal parameters completion chain sampling (may NULL unused). state zero-argument function accessing current values adapter state variables.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/robust_shape_adapter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create object to adapt proposal shape (and scale) using robust adaptive Metropolis algorithm of Vihola (2012). — robust_shape_adapter","text":"Vihola, M. (2012). Robust adaptive Metropolis algorithm coerced acceptance rate. Statistics Computing, 22, 997-1008. https://doi.iorg/10.1007/s11222-011-9269-5","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/robust_shape_adapter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create object to adapt proposal shape (and scale) using robust adaptive Metropolis algorithm of Vihola (2012). — robust_shape_adapter","text":"","code":"target_distribution <- list(   log_density = function(x) -sum(x^2) / 2,   grad_log_density = function(x) -x ) proposal <- barker_proposal(target_distribution) adapter <- robust_shape_adapter(initial_scale = 1., target_accept_prob = 0.4) adapter$initialize(proposal, chain_state(c(0, 0)))"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_barker.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample new state from Barker proposal. — sample_barker","title":"Sample new state from Barker proposal. — sample_barker","text":"Sample new state Barker proposal.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_barker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample new state from Barker proposal. — sample_barker","text":"","code":"sample_barker(   state,   target_distribution,   scale_and_shape,   sample_auxiliary = stats::rnorm,   sample_uniform = stats::runif )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_barker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample new state from Barker proposal. — sample_barker","text":"state Current chain state. target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. scale_and_shape Scalar, vector matrix scales shapes proposal distribution. scalar (case value non-negative) auxiliary vector isotropically scaled value. vector (case value equal length dimension space entries non-negative) dimension auxiliary vector scaled separately. matrix (case value square matrix size equal dimension space) pre-multiplying auxiliary vector arbitrary linear transformations can performed. sample_auxiliary Function generates random vector auxiliary variable distribution. sample_uniform Function generates random vector standard uniform distribution given integer size.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_barker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample new state from Barker proposal. — sample_barker","text":"Proposed new chain state.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_chain.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a Markov chain — sample_chain","title":"Sample a Markov chain — sample_chain","text":"Sample Markov chain using Metropolis-Hastings kernel given proposal target distributions, optionally adapting proposal parameters warm-stage.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_chain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a Markov chain — sample_chain","text":"","code":"sample_chain(   target_distribution,   proposal,   initial_state,   n_warm_up_iteration,   n_main_iteration,   adapters = NULL,   trace_function = NULL,   show_progress_bar = TRUE,   trace_warm_up = FALSE )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_chain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a Markov chain — sample_chain","text":"target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. proposal Proposal distribution object. Must define entries sample, function generate sample proposal distribution given current chain state log_density_ratio, function compute log density ratio proposal given pair current proposed chain states. initial_state Initial chain state. Either vector specifying just position component chain state list output chain_state specifying full chain state. n_warm_up_iteration Number warm-(adaptive) chain iterations run. n_main_iteration Number main (non-adaptive) chain iterations run. adapters List adapters tune proposal parameters warm-. trace_function Function given current chain state outputs list variables trace main (non-adaptive) chain iteration. show_progress_bar Whether show progress bars sampling. Requires progress package installed effect. trace_warm_up Whether record chain traces adaptation / transition statistics (adaptive) warm-iterations addition (non-adaptive) main chain iterations.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_chain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a Markov chain — sample_chain","text":"list entries final_state: final chain state, traces: matrix named columns contained traced variables main chain iteration, variables along columns iterations along rows. statistics: matrix named columns containing transition statistics main chain iteration, statistics along columns iterations along rows. warm_up_traces: matrix named columns contained traced variables warm-chain iteration, variables along columns iterations along rows. present trace_warm_up = TRUE. warm_up_statistics: matrix named columns containing adaptation transition statistics warm-chain iteration, statistics along columns iterations along rows. present trace_warm_up = TRUE.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_chain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a Markov chain — sample_chain","text":"","code":"target_distribution <- list(   log_density = function(x) -sum(x^2) / 2,   gradient_log_density = function(x) -x ) proposal <- barker_proposal(target_distribution, scale = 1.) n_warm_up_iteration <- 1000 n_main_iteration <- 1000 withr::with_seed(876287L, {   initial_state <- chain_state(stats::rnorm(2))   results <- sample_chain(     target_distribution,     proposal,     initial_state,     n_warm_up_iteration,     n_main_iteration   ) })"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_langevin.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample new state from Langevin proposal. — sample_langevin","title":"Sample new state from Langevin proposal. — sample_langevin","text":"Sample new state Langevin proposal.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_langevin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample new state from Langevin proposal. — sample_langevin","text":"","code":"sample_langevin(   state,   target_distribution,   scale_and_shape,   sample_auxiliary = stats::rnorm )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_langevin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample new state from Langevin proposal. — sample_langevin","text":"target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. sample_auxiliary Function generates random vector auxiliary variable distribution.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_langevin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample new state from Langevin proposal. — sample_langevin","text":"Proposal object. list entries sample: function generate sample proposal distribution given current chain state, log_density_ratio:  function compute log density ratio proposal given pair current proposed chain states, update: function update parameters proposal, parameters: function return list current parameter values. default_target_accept_prob: function returning default target acceptance rate use scale adaptation. default_initial_scale: function given dimension gives default value use initial proposal scale parameter.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_metropolis_hastings.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from Metropolis-Hastings kernel. — sample_metropolis_hastings","title":"Sample from Metropolis-Hastings kernel. — sample_metropolis_hastings","text":"Sample Metropolis-Hastings kernel.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_metropolis_hastings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from Metropolis-Hastings kernel. — sample_metropolis_hastings","text":"","code":"sample_metropolis_hastings(   state,   target_distribution,   proposal,   sample_uniform = stats::runif )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_metropolis_hastings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from Metropolis-Hastings kernel. — sample_metropolis_hastings","text":"state Current chain state. target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. proposal Proposal distribution object. Must define entries sample, function generate sample proposal distribution given current chain state log_density_ratio, function compute log density ratio proposal given pair current proposed chain states. sample_uniform Function generates random vector standard uniform distribution given integer size.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_metropolis_hastings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from Metropolis-Hastings kernel. — sample_metropolis_hastings","text":"List named entries state: corresponding new chain state, proposed_state: corresponding proposed chain state, statistics: list named entries statistics transition, consisting named entry accept_prob Metropolis acceptance probability.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_random_walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample new state from random walk proposal. — sample_random_walk","title":"Sample new state from random walk proposal. — sample_random_walk","text":"Sample new state random walk proposal.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_random_walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample new state from random walk proposal. — sample_random_walk","text":"","code":"sample_random_walk(   state,   target_distribution,   scale_and_shape,   sample_auxiliary = stats::rnorm )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_random_walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample new state from random walk proposal. — sample_random_walk","text":"target_distribution Target stationary distribution chain. list named entries log_density gradient_log_density corresponding respectively functions evaluating logarithm (potentially unnormalized) density target distribution gradient. alternative gradient_log_density entry value_and_gradient_log_density may instead provided function returning value gradient logarithm (unnormalized) density target distribution list names value gradient respectively. sample_auxiliary Function generates random vector auxiliary variable distribution.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/sample_random_walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample new state from random walk proposal. — sample_random_walk","text":"Proposal object. list entries sample: function generate sample proposal distribution given current chain state, log_density_ratio:  function compute log density ratio proposal given pair current proposed chain states, update: function update parameters proposal, parameters: function return list current parameter values. default_target_accept_prob: function returning default target acceptance rate use scale adaptation. default_initial_scale: function given dimension gives default value use initial proposal scale parameter.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/scale_adapter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object to adapt proposal scale to coerce average acceptance rate. — scale_adapter","title":"Create object to adapt proposal scale to coerce average acceptance rate. — scale_adapter","text":"Create object adapt proposal scale coerce average acceptance rate.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/scale_adapter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object to adapt proposal scale to coerce average acceptance rate. — scale_adapter","text":"","code":"scale_adapter(initial_scale = NULL, target_accept_prob = NULL, kappa = 0.6)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/scale_adapter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object to adapt proposal scale to coerce average acceptance rate. — scale_adapter","text":"initial_scale Initial value use scale parameter. set explicitly proposal dimension dependent default used. target_accept_prob Target value average accept probability chain. set proposal dependent default used. kappa Decay rate exponent [0.5, 1] adaptation learning rate.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/scale_adapter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object to adapt proposal scale to coerce average acceptance rate. — scale_adapter","text":"List functions entries initialize, function initializing adapter state proposal parameters beginning chain, update function updating adapter state proposal parameters chain iteration, finalize function performing final updates adapter state proposal parameters completion chain sampling (may NULL unused). state zero-argument function accessing current values adapter state variables.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/scale_adapter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create object to adapt proposal scale to coerce average acceptance rate. — scale_adapter","text":"","code":"target_distribution <- list(   log_density = function(x) -sum(x^2) / 2,   grad_log_density = function(x) -x ) proposal <- barker_proposal(target_distribution) adapter <- scale_adapter(initial_scale = 1., target_accept_prob = 0.4) adapter$initialize(proposal, chain_state(c(0, 0)))"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/target_distribution_from_stan_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct target distribution from a BridgeStan StanModel object. — target_distribution_from_stan_model","title":"Construct target distribution from a BridgeStan StanModel object. — target_distribution_from_stan_model","text":"Construct target distribution BridgeStan StanModel object.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/target_distribution_from_stan_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct target distribution from a BridgeStan StanModel object. — target_distribution_from_stan_model","text":"","code":"target_distribution_from_stan_model(model)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/target_distribution_from_stan_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct target distribution from a BridgeStan StanModel object. — target_distribution_from_stan_model","text":"model Stan model object use target (posterior) distribution.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/target_distribution_from_stan_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct target distribution from a BridgeStan StanModel object. — target_distribution_from_stan_model","text":"list entries log_density: function evaluate log density function target distribution given current position vector. value_and_gradient_log_density: function evaluate value gradient log density function target distribution given current position vector, returning list entries value gradient.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/target_distribution_from_stan_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct target distribution from a BridgeStan StanModel object. — target_distribution_from_stan_model","text":"","code":"model <- example_gaussian_stan_model() target_distribution <- target_distribution_from_stan_model(model) withr::with_seed(   876287L, state <- chain_state(stats::rnorm(model$param_unc_num())) ) state$log_density(target_distribution) #> [1] -37.48172"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/trace_function_from_stan_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct trace function from a BridgeStan StanModel object. — trace_function_from_stan_model","title":"Construct trace function from a BridgeStan StanModel object. — trace_function_from_stan_model","text":"Construct trace function BridgeStan StanModel object.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/trace_function_from_stan_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct trace function from a BridgeStan StanModel object. — trace_function_from_stan_model","text":"","code":"trace_function_from_stan_model(   model,   include_log_density = TRUE,   include_generated_quantities = FALSE,   include_transformed_parameters = FALSE )"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/trace_function_from_stan_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct trace function from a BridgeStan StanModel object. — trace_function_from_stan_model","text":"model Stan model object use generate (constrained) parameters trace. include_log_density Whether include entry log_density corresponding current log density target distribution values returned trace function. include_generated_quantities Whether included generated quantities Stan model definition values returned trace function. include_transformed_parameters Whether include transformed parameters Stan model definition values returned trace function.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/trace_function_from_stan_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct trace function from a BridgeStan StanModel object. — trace_function_from_stan_model","text":"function given chain_state object returns named vector values trace sampling. constrained parameter values model always included.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/trace_function_from_stan_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct trace function from a BridgeStan StanModel object. — trace_function_from_stan_model","text":"","code":"model <- example_gaussian_stan_model() trace_function <- trace_function_from_stan_model(model) withr::with_seed(876287L, state <- chain_state(rnorm(model$param_unc_num()))) trace_function(state) #>           mu        sigma  log_density  #>   -2.4372636    0.9944442 -118.6630971"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/variance_adapter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create object to adapt proposal with per dimension scales based on estimates of target distribution variances. — variance_adapter","title":"Create object to adapt proposal with per dimension scales based on estimates of target distribution variances. — variance_adapter","text":"Create object adapt proposal per dimension scales based estimates target distribution variances.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/variance_adapter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create object to adapt proposal with per dimension scales based on estimates of target distribution variances. — variance_adapter","text":"","code":"variance_adapter(kappa = 0.6)"},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/variance_adapter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create object to adapt proposal with per dimension scales based on estimates of target distribution variances. — variance_adapter","text":"kappa Decay rate exponent [0.5, 1] adaptation learning rate.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/variance_adapter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create object to adapt proposal with per dimension scales based on estimates of target distribution variances. — variance_adapter","text":"List functions entries initialize, function initializing adapter state proposal parameters beginning chain, update function updating adapter state proposal parameters chain iteration, finalize function performing final updates adapter state proposal parameters completion chain sampling (may NULL unused). state zero-argument function accessing current values adapter state variables.","code":""},{"path":"http://github-pages.ucl.ac.uk/rmcmc/reference/variance_adapter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create object to adapt proposal with per dimension scales based on estimates of target distribution variances. — variance_adapter","text":"","code":"target_distribution <- list(   log_density = function(x) -sum(x^2) / 2,   grad_log_density = function(x) -x ) proposal <- barker_proposal(target_distribution) adapter <- variance_adapter() adapter$initialize(proposal, chain_state(c(0, 0)))"}]
